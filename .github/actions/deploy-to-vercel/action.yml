name: Deploy to Vercel
description: Deploy to Vercel
inputs:
  VERCEL_ORG_ID:
    description: Vercel organization ID
    required: true
  VERCEL_PROJECT_ID:
    description: Vercel project ID
    required: true
  VERCEL_TOKEN:
    description: Vercel token
    required: true
  ENVIRONMENT:
    description: Environment
    required: true

runs:
  using: composite
  steps:
    - name: Install Vercel CLI
      run: npm install -g vercel
      shell: bash

    - name: Generate Vercel output
      shell: bash
      env:
        VERCEL_TOKEN: ${{ inputs.VERCEL_TOKEN }}
      run: |
        vercel pull --yes --token=$VERCEL_TOKEN
        vercel build --cwd build --output .vercel/output

    - name: Deploy to Vercel (Staging)
      if: ${{ inputs.ENVIRONMENT == 'Staging' }}
      shell: bash
      env:
        VERCEL_ORG_ID: ${{ inputs.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ inputs.VERCEL_PROJECT_ID }}
        VERCEL_TOKEN: ${{ inputs.VERCEL_TOKEN }}
      run: |
        url="$(vercel deploy --prebuilt --cwd .vercel/output --token=$VERCEL_TOKEN)"
        vercel alias set "$url" staging-api.binary.sx

    - name: Deploy to Vercel (Production)
      if: ${{ inputs.ENVIRONMENT == 'Production' }}
      shell: bash
      env:
        VERCEL_ORG_ID: ${{ inputs.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ inputs.VERCEL_PROJECT_ID }}
        VERCEL_TOKEN: ${{ inputs.VERCEL_TOKEN }}
      run: |
        url="$(vercel deploy --prebuilt --cwd .vercel/output --token=$VERCEL_TOKEN)"
        vercel alias set "$url" api.binary.sx
